Subject: stmpe-ts: Fix inverted pressure, empty datasets and IRQ flag

This patch adresses 3 issues:
1. Report increased pressure with increasing numbers
2. Skip empty datasets
   stmpe_work() resets the FIFO, and this can happen during an interrupt
3. Reset the touch controller part if the FIFO_TH flag is not cleared.
   If the flag is not cleared, the result is a nonresponsive touchpanel.
   The flag has to be cleared for the controller to generate an interrupt.
   There are 3 people reporting this on the Adafruit PiTFT display
   Links:
   http://forums.adafruit.com/viewtopic.php?f=50&t=51432
   https://github.com/notro/fbtft/issues/82

---

diff --git a/drivers/input/touchscreen/stmpe-ts.c b/drivers/input/touchscreen/stmpe-ts.c
index 59e81b0..2086b81 100644
--- a/drivers/input/touchscreen/stmpe-ts.c
+++ b/drivers/input/touchscreen/stmpe-ts.c
@@ -49,6 +49,7 @@
 #define STMPE_FIFO_STA_RESET		(1<<0)
 
 #define STMPE_IRQ_TOUCH_DET		0
+#define STMPE_IRQ_FIFO_TH		1
 
 #define SAMPLE_TIME(x)			((x & 0xf) << 4)
 #define MOD_12B(x)			((x & 0x1) << 3)
@@ -80,6 +81,9 @@ struct stmpe_touch {
 	u8 i_drive;
 };
 
+static unsigned debug;
+module_param(debug, uint, 0);
+
 static int __stmpe_reset_fifo(struct stmpe *stmpe)
 {
 	int ret;
@@ -101,6 +105,9 @@ static void stmpe_work(struct work_struct *work)
 	struct stmpe_touch *ts =
 	    container_of(work, struct stmpe_touch, work.work);
 
+	if (debug > 1)
+		printk("%s()\n", __func__);
+
 	int_sta = stmpe_reg_read(ts->stmpe, STMPE_REG_INT_STA);
 
 	/*
@@ -116,12 +123,36 @@ static void stmpe_work(struct work_struct *work)
 		udelay(100);
 	}
 
+	if (debug > 1)
+		printk("    timeout=%u, INT_STA=0x%02X\n", timeout, int_sta);
+
 	/* reset the FIFO before we report release event */
 	__stmpe_reset_fifo(ts->stmpe);
 
 	input_report_abs(ts->idev, ABS_PRESSURE, 0);
 	input_report_key(ts->idev, BTN_TOUCH, 0);
 	input_sync(ts->idev);
+
+	/*
+	 * Sometimes the FIFO_TH interrupt flag is not cleared.
+	 * This prevents the controller from generating a new interrupt.
+	 * Clear the flag and re-enable the touchscreen controller to be
+	 * sure it's in working order again.
+	 * If a touch IRQ happens while in this function, FIFO_TH will be set,
+	 * but it doesn't indicate a hang. We reset anyway since the
+	 * consequence is loosing just one data point.
+	 */
+	if (int_sta & (1 << STMPE_IRQ_FIFO_TH)) {
+		stmpe_set_bits(ts->stmpe, STMPE_REG_TSC_CTRL,
+				STMPE_TSC_CTRL_TSC_EN, 0);
+		stmpe_reg_write(ts->stmpe, STMPE_REG_INT_STA, (1 << STMPE_IRQ_FIFO_TH));
+		__stmpe_reset_fifo(ts->stmpe);
+		stmpe_set_bits(ts->stmpe, STMPE_REG_TSC_CTRL,
+			STMPE_TSC_CTRL_TSC_EN, STMPE_TSC_CTRL_TSC_EN);
+		if (debug)
+			printk("    cleared interrupt flag FIFO_TH, INT_STA: 0x%02X -> 0x%02X\n",
+				int_sta, stmpe_reg_read(ts->stmpe, STMPE_REG_INT_STA));
+	}
 }
 
 static irqreturn_t stmpe_ts_handler(int irq, void *data)
@@ -130,6 +161,9 @@ static irqreturn_t stmpe_ts_handler(int irq, void *data)
 	int x, y, z;
 	struct stmpe_touch *ts = data;
 
+	if (debug > 1)
+		printk("%s()\n", __func__);
+
 	/*
 	 * Cancel scheduled polling for release if we have new value
 	 * available. Wait if the polling is already running.
@@ -151,11 +185,19 @@ static irqreturn_t stmpe_ts_handler(int irq, void *data)
 	y = ((data_set[1] & 0xf) << 8) | data_set[2];
 	z = data_set[3];
 
-	input_report_abs(ts->idev, ABS_X, x);
-	input_report_abs(ts->idev, ABS_Y, y);
-	input_report_abs(ts->idev, ABS_PRESSURE, z);
-	input_report_key(ts->idev, BTN_TOUCH, 1);
-	input_sync(ts->idev);
+	/*
+	 * Skip empty datasets
+	 * If stmpe_ts_handler() interrupts stmpe_work(), and stmpe_work
+	 * hasn't reset the FIFO yet, the FIFO will be empty here.
+	 * This is because stmpe_ts_handler waits for stmpe_work to finish
+	 */
+	if (x && y && z) {
+		input_report_abs(ts->idev, ABS_X, x);
+		input_report_abs(ts->idev, ABS_Y, y);
+		input_report_abs(ts->idev, ABS_PRESSURE, 0xff - z);
+		input_report_key(ts->idev, BTN_TOUCH, 1);
+		input_sync(ts->idev);
+	}
 
        /* flush the FIFO after we have read out our values. */
 	__stmpe_reset_fifo(ts->stmpe);
